import java.util.*;
import java.io.*;
import java.lang.*;
class Driver
{
    public static void main(String args[])throws IOException
    {
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while(t-- > 0)
        {
            int n = Integer.parseInt(read.readLine().trim());
            String str[] = read.readLine().trim().split(" ");
            int x = Integer.parseInt(str[0]);
            int y = Integer.parseInt(str[1]);
            int z = Integer.parseInt(str[2]);
            System.out.println(new Solution().maximizeCuts(n, x, y, z));
        }
    }
}
class Solution
{
    public int maximizeCuts(int n, int x, int y, int z)
    {
        int[] dp = new int[n + 1];
        Arrays.fill(dp, -1);
        dp[0] = 0; 
        for (int i = 1; i <= n; i++) {
            if (i >= x && dp[i - x] != -1) {
                dp[i] = Math.max(dp[i], dp[i - x] + 1);
            }
            if (i >= y && dp[i - y] != -1) {
                dp[i] = Math.max(dp[i], dp[i - y] + 1);
            }
            if (i >= z && dp[i - z] != -1) {
                dp[i] = Math.max(dp[i], dp[i - z] + 1);
            }
        }
        return dp[n] == -1 ? 0 : dp[n];
    }
}
